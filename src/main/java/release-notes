version 0.5.6
- changed OPC UA namespace tree to mimic the OPC UA server we are currently testing (hardcoded => change needed to make this smart)

version 0.5.7
- refactored commandline argument processing
- introduced '-port' commandline argument to be able to set the port the service runs on
- fixed reapplying the initial zero data value when starting a over again with replaying the data file (endless mode)

version 0.5.8
- introduced the '-namespace' argument to be able to set the namespace of the data OPC UA player serves
- introduced the '-url' argument to be able to set the main url the OPC UA Player serves
- introduced the '-servicename' argument to be able to set the name of the OPC UA Player
- check for example how well it a Siemens OPC UA PLC mimics with "java -jar OPCUA-Controllable-Player-0.5.8-SNAPSHOT-jar-with-dependencies.jar -autostart -port 4840 -servicename TTI_WST_OPCUA_B -uri / -namespace http://www.siemens.com/simatic-classic-s7-opcua -datafile PlayerDemoData.csv -configfile AssetConfiguration.csv"

version 0.5.9
- bugfix of endless loop mode : time shift to current time was not recalculated at the end of the loop (used UA Expert datalogger feature to verify if bug was fixed)

version 0.5.10
- merged into 0.5.5 master

version 0.5.11
- refactored processing of config file, it now accepts dotted asset names so that these become folders under root/object and the names of the folders and variable nodes will have the full dotted name
- this was changed in reading the config file, in the namespace construction and processing of the data file
- added hierarchical namespace support, i.e. measurement point "Asset13.SubSystem21.SubSubSystem3.Current" will end up under the third level of folder names, i.e. Asset13=>SubSystem21=>SubSubSystem3=>Current

version 0.6.0
- new functionality added: a simulation capability that allows to define measurement point with mathematical functions
- configuration of simulated measurement points through the configuration file, automatically detected, interpreted and run
- circular dependencies will circumvented
- simulations function can use values of other measurement points
- refactored the specific simulation measurement point into normal measurement points
- data file command line parameter no longer mandatory because the configuration file might contain just simulated measurement points
- the simulation keyword is removed

version 0.6.1
- add more data types (Int16, Int32, Uint16, Uint32, Float, String, and some more obscure ones)
- added a new column (9th column) to the config file
- refactored the code to adapt to the configurable data types in the config file
    - MeasurementPoint/PointInTime: DataType setting and (initial) sample value setting based on DataType
    - AssetConfiguration: added data type field
    - PlayerNameSpace: adapted the way the UaVariableNodes are created with the new data type mechanism
- created two configuration files with data types and tested with these
- deleted some legacy simulator code

version 0.6.2
- debugged and refactored the internal data type processing: the Node Values (OPC UA Variant) were not properly created with the right internal object types (most where created new Variant( String))
- bugfix: UInt16 became UInt32 when during playback such value was passed
- bugfix: Boolean values in the data file where not interpreted properly
- smaller refactoring: static constant moved to PlayerNameSpace where it belonged
- refacturing TIMESTAMP_FORMATTER, copies of this DateTimeFormatter are removed from the code base

version 0.6.3
- updated to Milo version 0.5.4. PlayerNameSpace got new builders to create the UAVariableNodes and a new AccessFilter.
- removed legacy simulation code.
- fixed bug in RunState variable node: Its internal Enumeration was exposed, now replaced by strings. Its also read only now.

version 0.7.0
- added the OPC UA Recorder feature as complementary to the exisiting Player functionality
- see readme.txt for a feature description
- see product-backlog for usage examples
- tested with the Digital Petri public Exclise OPC UA Milo server and with a local Prosys OPC UA Simulation server
- refactored PlayerConfiguration class into Configuration class and added the Recorder configuration
- improved part of the logger usage (will all be just plain Java Logger)
- added a MainController class that will kick of the Player or the Recorder based on the configuration
- removed some minor bugs

version 0.7.1
- bumped to Milo version 0.6.11
- fixed a bug with not respecting the read or read/write access right of nodes in the configuration file
- 